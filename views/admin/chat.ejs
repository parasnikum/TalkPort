<!-- <!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chat Messages</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.js"
    integrity="sha512-8BHxHDLsOHx+flIrQ0DrZcea7MkHqRU5GbTHmbdzMRnAaoCIkZ97PqZcXJkKZckMMhqfoeaJE+DNUVuyoQsO3Q=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: "Segoe UI", sans-serif;
    }

    body {
      display: flex;
      height: 100vh;
      background-color: #f4f6f9;
    }

    .sidebar {
      width: 240px;
      background-color: #2f3542;
      color: white;
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .sidebar h2 {
      margin-bottom: 30px;
      font-size: 24px;
      text-align: center;
      border-bottom: 1px solid #57606f;
      padding-bottom: 10px;
    }

    .sidebar a {
      text-decoration: none;
      color: white;
      margin: 10px 0;
      padding: 10px;
      border-radius: 4px;
      transition: background 0.3s;
    }

    .sidebar a:hover {
      background-color: #57606f;
    }

    .main-content {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
    }

    .header {
      font-size: 28px;
      font-weight: bold;
      margin-bottom: 20px;
    }

    .message-container {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      max-height: 80vh;
      overflow-y: auto;
    }

    .message {
      margin: 10px 0;
      max-width: 60%;
      padding: 12px;
      border-radius: 10px;
      word-wrap: break-word;
      position: relative;
    }

    .sent {
      background-color: #d1f5d3;
      align-self: flex-end;
    }

    .received {
      background-color: #f1f0f0;
      align-self: flex-start;
    }

    .meta {
      font-size: 12px;
      color: #888;
      margin-top: 4px;
    }
  </style>
</head>

<body>

  <div class="sidebar">
    <h2>Admin Panel</h2>
    <a href="#">üè† Home</a>
    <a href="/admin">üí¨ Chats</a>
    <a href="#">üìä Analytics</a>
    <a href="#">‚öôÔ∏è Settings</a>
    <a href="#">üö™ Logout</a>
  </div>

  <div class="main-content">
    <div class="header">Messages</div>

    <div class="message-container">
      From: <span id="sender-id">
        <%= senderId %>
      </span>
      <% if (messages && messages.length> 0) { %>
        <% messages.forEach(msg=> { %>
          <div class="message <%= msg.senderId === 'Agent' ? 'sent' : 'received' %>">
            <div>
              <%= msg.msgContent %>
            </div>
            <div class="meta">
              <%= new Date(msg.timestamp).toLocaleString() %>
            </div>
          </div>
          <% }) %>
            <% } else { %>
              <p>No messages found.</p>
              <% } %>
    </div>
    <div>

      <input id="message-input" type="text" placeholder="Enter Message">
      <input id="agent-message-send" type="button" value="Send Message">
    </div>
  </div>

  <script>
    const socket = io();
    const sendBtn = document.getElementById("agent-message-send");
    const senderID = document.getElementById("sender-id").innerText;
    const messages = document.querySelector('.message-container');

    
    socket.on('connect', () => {
      console.log('Connected to socket server');
    });

    socket.emit("admin-join-newroom",senderID)



    socket.on("update-newchat", (newmsg) => {
      console.log("update-newchat is listened over here")
      const userMsg = document.createElement('div');
      //userMsg.className = 'message received';
      userMsg.innerHTML = `<div class="message received">
            <div>
             ${newmsg.msg}
            </div>
            <div class="meta">
             ${newmsg.timestamp}
            </div>
          </div>`
      messages.appendChild(userMsg);
      messages.scrollTop = messages.scrollHeight;

    })
    sendBtn.addEventListener("click", () => {
      let msgInput = document.getElementById("message-input");
      console.log("my sender id", senderID)

      if ((msgInput.value).trim().length > 0) {
        socket.emit("agent-message", { msg: msgInput.value, uuid: senderID, chatID: "<%= chatID%>" })
        const agentReply = document.createElement('div');
        agentReply.className = 'message sent';
        agentReply.textContent = msgInput.value;
        messages.appendChild(agentReply);
        messages.scrollTop = messages.scrollHeight;
      }
      msgInput.value = "";
    })

  </script>>
</body>

</html> -->


<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chat Messages</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.js"
    integrity="sha512-8BHxHDLsOHx+flIrQ0DrZcea7MkHqRU5GbTHmbdzMRnAaoCIkZ97PqZcXJkKZckMMhqfoeaJE+DNUVuyoQsO3Q=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

  <style>
  * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }

    body {
      display: flex;
      min-height: 100vh;
      background-color: #f0f2f5;
      color: #333;
    }

    .sidebar {
      width: 250px;
      background: #1e272e;
      color: white;
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .sidebar h2 {
      font-size: 22px;
      margin-bottom: 30px;
      text-align: center;
      border-bottom: 1px solid #485460;
      padding-bottom: 10px;
    }

    .sidebar a {
      color: #dcdde1;
      text-decoration: none;
      padding: 12px;
      border-radius: 6px;
      margin: 6px 0;
      display: flex;
      align-items: center;
      transition: background 0.2s;
    }

    .sidebar a:hover {
      background: #485460;
    }

    .main-content {
      flex: 1;
      padding: 30px;
      overflow-y: auto;
    }

    .header {
      font-size: 28px;
      font-weight: 600;
      margin-bottom: 20px;
    }
    
    .message-container {
      flex: 1;
      background: white;
      border-radius: 10px;
      padding: 20px;
      overflow-y: auto;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
      display: flex;
      flex-direction: column;
    }

    .message {
      max-width: 70%;
      padding: 12px 16px;
      margin: 6px 0;
      border-radius: 12px;
      line-height: 1.4;
      position: relative;
      font-size: 15px;
    }

    .sent {
      background-color: #dafadf;
      align-self: flex-end;
      border-bottom-right-radius: 0;
    }

    .received {
      background-color: #f1f0f0;
      align-self: flex-start;
      border-bottom-left-radius: 0;
    }

    .meta {
      font-size: 11px;
      color: #888;
      margin-top: 4px;
    }

    .input-area {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    #message-input {
      flex: 1;
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #ccc;
      outline: none;
      font-size: 14px;
    }

    #agent-message-send {
      padding: 12px 20px;
      background-color: #2ed573;
      border: none;
      border-radius: 8px;
      color: white;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s;
    }

    #agent-message-send:hover {
      background-color: #1eae5c;
    }

    /* Responsive tweaks */
    @media (max-width: 768px) {
      body {
        flex-direction: column;
      }

      .sidebar {
        width: 100%;
        flex-direction: row;
        justify-content: space-around;
        padding: 10px;
      }

      .main-content {
        padding: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <h2>Admin Panel</h2>
    <a href="/admin">üè† Home</a>
    <a href="/admin/chats">üí¨ Chats</a>
    <a href="/admin/analytics">üìä Analytics</a>
    <a href="/admin/settings/bots">‚öôÔ∏è Settings</a>
    <a href="#">üö™ Logout</a>
  </div>

  <div class="main-content">
    <div class="header">Messages</div>
    From: <span id="sender-id">Visitor - <%= senderId %></span>

    <div class="message-container">
      <% 
        let lastDate = null;
        function formatDateHeader(timestamp) {
          const date = new Date(timestamp);
          const today = new Date();
          const yesterday = new Date();
          yesterday.setDate(today.getDate() - 1);

          if (date.toDateString() === today.toDateString()) return "Today";
          if (date.toDateString() === yesterday.toDateString()) return "Yesterday";

          return date.toLocaleDateString('en-US', {
            month: 'long',
            day: 'numeric',
            year: 'numeric'
          });
        }

        if (messages && messages.length > 0) {
          messages.forEach(msg => {
            const msgDate = new Date(msg.timestamp).toDateString();
            if (msgDate !== lastDate) {
      %>
              <div class="date-separator"><%= formatDateHeader(msg.timestamp) %></div>
      <%     lastDate = msgDate;
            } 
      %>
            <div class="message <%= msg.senderId === 'Agent' ? 'sent' : 'received' %>">
              <div><%= msg.msgContent %></div>
              <div class="meta"><%= new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %></div>
            </div>
      <%   });
        } else { %>
          <p>No messages found.</p>
      <% } %>
    </div>

    <div class="input-area">
      <input id="message-input" type="text" placeholder="Enter your message..." />
      <input id="agent-message-send" type="button" value="Send" />
    </div>
  </div>

  <audio type="audio/mp3" src="../../Sounds/new-incoming-message.mp3" id="notification_message"></audio>

  <style>
    .date-separator {
      text-align: center;
      font-size: 13px;
      color: #888;
      margin: 16px 0;
      position: relative;
    }

    .date-separator::before,
    .date-separator::after {
      content: "";
      display: inline-block;
      width: 40%;
      height: 1px;
      background: #ddd;
      vertical-align: middle;
      margin: 0 8px;
    }

    .message-container {
      flex: 1;
      background: white;
      border-radius: 10px;
      padding: 20px;
      overflow-y: auto;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
      display: flex;
      flex-direction: column;
    }

    .message {
      max-width: 70%;
      padding: 12px 16px;
      margin: 6px 0;
      border-radius: 12px;
      line-height: 1.4;
      position: relative;
      font-size: 15px;
    }

    .sent {
      background-color: #dafadf;
      align-self: flex-end;
      border-bottom-right-radius: 0;
    }

    .received {
      background-color: #f1f0f0;
      align-self: flex-start;
      border-bottom-left-radius: 0;
    }

    .meta {
      font-size: 11px;
      color: #666;
      margin-top: 4px;
      text-align: right;
    }

    .input-area {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    #message-input {
      flex: 1;
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #ccc;
      outline: none;
      font-size: 14px;
    }

    #agent-message-send {
      padding: 12px 20px;
      background-color: #2ed573;
      border: none;
      border-radius: 8px;
      color: white;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s;
    }

    #agent-message-send:hover {
      background-color: #1eae5c;
    }
  </style>

  <script>
    const socket = io();
    const sendBtn = document.getElementById("agent-message-send");
    const msgInput = document.getElementById("message-input");
    const senderID = document.getElementById("sender-id").innerText;
    const messages = document.querySelector('.message-container');
    const notification = document.getElementById("notification_message");

    let isFocus = document.hasFocus();
    let userInteracted = false;
    let lastRenderedDate = null;

    window.addEventListener("focus", () => isFocus = true);
    window.addEventListener("blur", () => isFocus = false);
    ["click", "keydown", "touchstart"].forEach(event => {
      window.addEventListener(event, () => userInteracted = true, { once: true });
    });

    socket.on('connect', () => {
      console.log('Connected to socket server');
    });

    socket.emit("admin-join-newroom", senderID);

    function formatDateHeader(timestamp) {
      const date = new Date(timestamp);
      const today = new Date();
      const yesterday = new Date();
      yesterday.setDate(today.getDate() - 1);

      if (date.toDateString() === today.toDateString()) return "New Message";
      if (date.toDateString() === yesterday.toDateString()) return "Yesterday";

      return date.toLocaleDateString('en-US', {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      });
    }

    function appendDateSeparatorIfNeeded(timestamp) {
      const dateStr = new Date(timestamp).toDateString();
      if (dateStr !== lastRenderedDate) {
        const dateSeparator = document.createElement("div");
        dateSeparator.className = "date-separator";
        dateSeparator.textContent = formatDateHeader(timestamp);
        messages.appendChild(dateSeparator);
        lastRenderedDate = dateStr;
      }
    }

    socket.on("update-newchat", (newmsg) => {
      if (!newmsg || !newmsg.msg || !newmsg.timestamp) return;

      appendDateSeparatorIfNeeded(newmsg.timestamp);

      const userMsg = document.createElement("div");
      userMsg.classList.add("message", "received");
      userMsg.innerHTML = `
        <div>${newmsg.msg.substring(0,7)}</div>
        <div class="meta">${new Date(newmsg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
      `;
      messages.appendChild(userMsg);
      messages.scrollTop = messages.scrollHeight;

      if (!isFocus && userInteracted) {
        notification.play().catch(err => console.error("Audio play failed:", err));
      }
    });

    function sendMessage() {
      const content = msgInput.value.trim();
      if (content.length === 0) return;

      const now = new Date();
      socket.emit("agent-message", {
        msg: content,
        uuid: senderID,
        chatID: "<%= chatID %>",
        timestamp: now.toISOString()
      });

      appendDateSeparatorIfNeeded(now);

      const agentReply = document.createElement("div");
      agentReply.classList.add("message", "sent");
      agentReply.innerHTML = `
        <div>${content}</div>
        <div class="meta">${now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
      `;
      messages.appendChild(agentReply);
      messages.scrollTop = messages.scrollHeight;
      msgInput.value = "";
    }

    sendBtn.addEventListener("click", sendMessage);
    msgInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        sendMessage();
      }
    });
  </script>
</body>



</html>