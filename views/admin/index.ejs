<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.js"
        integrity="sha512-8BHxHDLsOHx+flIrQ0DrZcea7MkHqRU5GbTHmbdzMRnAaoCIkZ97PqZcXJkKZckMMhqfoeaJE+DNUVuyoQsO3Q=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            display: flex;
            height: 100vh;
            background-color: #f4f6f9;
        }

        .sidebar {
            width: 250px;
            background-color: #2f3542;
            color: white;
            padding: 30px;
            display: flex;
            flex-direction: column;
            position: fixed;
            height: 100%;
            top: 0;
            left: 0;
        }

        .sidebar h2 {
            text-align: center;
            font-size: 24px;
            margin-bottom: 40px;
            border-bottom: 2px solid #57606f;
            padding-bottom: 10px;
        }

        .sidebar a {
            text-decoration: none;
            color: white;
            margin: 15px 0;
            padding: 12px 18px;
            border-radius: 6px;
            font-size: 16px;
            display: flex;
            align-items: center;
            transition: background 0.3s ease-in-out;
        }

        .sidebar a:hover {
            background-color: #57606f;
        }

        .sidebar a i {
            margin-right: 15px;
            font-size: 18px;
        }

        .main-content {
            margin-left: 250px;
            padding: 40px;
            flex: 1;
            overflow-y: auto;
            transition: margin-left 0.3s ease-in-out;
        }

        .header {
            font-size: 32px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #2f3542;
        }

        .card {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }

        .chat-list a {
            display: block;
            padding: 15px;
            background-color: #ecf0f1;
            margin: 12px 0;
            border-radius: 8px;
            text-decoration: none;
            color: #2f3542;
            position: relative;
            transition: background-color 0.3s;
            font-size: 16px;
        }

        .chat-list a:hover {
            background-color: #dcdde1;
        }

        .chat-meta {
            font-size: 14px;
            color: #555;
            margin-top: 8px;
        }

        .notification-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #ff4757;
            color: white;
            font-size: 12px;
            padding: 6px 10px;
            border-radius: 50%;
            display: none;
        }

        .notification-badge.show {
            display: inline-block;
        }

        .highlight {
            background-color: #ffeaa7 !important;
            border-left: 4px solid #ff4757;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                position: relative;
                padding: 15px;
            }

            .main-content {
                margin-left: 0;
                padding: 20px;
            }

            .sidebar h2 {
                font-size: 22px;
                margin-bottom: 20px;
            }

            .sidebar a {
                font-size: 14px;
                margin: 10px 0;
            }
        }
    </style>
</head>

<body>

    <div class="sidebar">
        <h2>Admin Panel</h2>
        <a href="#">üè† Home</a>
        <a href="#">üí¨ Chats</a>
        <a href="#">üìä Analytics</a>
        <a href="#">‚öôÔ∏è Settings</a>
        <a href="#">üö™ Logout</a>
    </div>

    <div class="main-content">
        <div class="header">Chats</div>

        <div class="chat-list">
            <% if (allChats && allChats.length > 0) { %>
                <% allChats.forEach(chat => { %>
                    <a href="/admin/chat/<%= chat._id %>" id="chat-<%= chat._id %>">
                        <strong>Chat ID:</strong> <%= chat.chatID %><br>
                        <span class="chat-meta">
                            Bot ID: <%= chat.botID %> | Created: <%= chat.createdAt.toDateString() %>
                        </span>
                        <!-- Notification badge -->
                        <span class="notification-badge" id="notification-badge-<%= chat._id %>">0</span>
                    </a>
                <% }) %>
            <% } else { %>
                <p>No chats found.</p>
            <% } %>
        </div>
    </div>

    <audio type="audio/mp3" loop src="../../Sounds/Cell Phone Ringing - Sound Effect.mp3" id="notification_call"></audio>
    <audio type="audio/mp3" src="../../Sounds/new-incoming-message.mp3" id="notification_message"></audio>

    <script>
        const socket = io();
        const notification = document.getElementById("notification_call");
        const notificationmsg = document.getElementById("notification_message");

        let pauseTimeout;
        let isFocus = document.hasFocus(); // initial state
        let userInteracted = false;
        let flashInterval;

        // Store unread messages count in localStorage
        function getUnreadCount(chatID) {
            const counts = JSON.parse(localStorage.getItem('unreadMessages')) || {};
            return counts[chatID] || 0;
        }

        function setUnreadCount(chatID, count) {
            let counts = JSON.parse(localStorage.getItem('unreadMessages')) || {};
            counts[chatID] = count;
            localStorage.setItem('unreadMessages', JSON.stringify(counts));
        }

        // Track focus state
        window.addEventListener("focus", () => {
            isFocus = true;
            stopFlashingTitle();
            clearTimeout(pauseTimeout);
            notification.pause();
            resetUnreadCount();
        });

        window.addEventListener("blur", () => {
            isFocus = false;
        });

        // Track user interaction to allow audio playback
        ["click", "keydown", "touchstart"].forEach(event => {
            window.addEventListener(event, () => {
                userInteracted = true;
            }, { once: true });
        });

        // Request browser notification permission early
        if (Notification.permission === "default") {
            Notification.requestPermission().then(permission => {
                console.log("Notification permission:", permission);
            });
        }

        // Play notification sound (if allowed)
        function playNotificationSound() {
            if (userInteracted && notification instanceof HTMLMediaElement) {
                notification.play().catch(error => {
                    console.error("Playback failed:", error);
                });

                clearTimeout(pauseTimeout);
                pauseTimeout = setTimeout(() => {
                    notification.pause();
                }, 30000);
            } else {
                console.warn("Cannot play sound ‚Äî user hasn't interacted yet.");
            }
        }

        // Handle incoming message
        socket.on("new_visitor_message", async (data) => {
            const chatList = document.querySelector(".chat-list");

            // Create anchor element
            const anchor = document.createElement('a');
            anchor.href = `/admin/chat/${data.chatResponse.chat._id}`;
            anchor.classList.add('chat-link');

            // Format creation date
            const formattedDate = new Date(data.chatResponse.chat.createdAt).toLocaleString();

            // Create inner HTML structure
            anchor.innerHTML = `
                <div class="chat-item" id="chat-${data.chatResponse.chat._id}">
                    <strong>Chat ID:</strong> ${data.chatResponse.chat.chatID || 'N/A'}<br>
                    <span class="chat-meta">
                        Bot ID: ${data.chatResponse.chat.botID || 'N/A'} |
                        Created: ${formattedDate}
                    </span>
                    <span class="notification-badge" id="notification-badge-${data.chatResponse.chat._id}">0</span>
                </div>
            `;

            // Insert it at the top of the chat list
            chatList.insertBefore(anchor, chatList.firstChild);

            // Handle focus and notifications
            if (isFocus) {
                console.log("New user came and agent was focused.");
            } else {
                playNotificationSound();
                flashTitle("üîî New Chat Message!");

                if (Notification.permission === "granted") {
                    new Notification("New Chat Message", {
                        body: data?.message || "A new visitor sent a message.",
                        icon: "/icon.png"
                    });
                }
            }
        });

        // Incoming message notification
        socket.on("incoming-message-notification", (newmsg) => {
            const chatID = newmsg.to; // Target chat ID where the message came

            const chatDiv = document.getElementById(`chat-${chatID}`);
            const badge = document.getElementById(`notification-badge-${chatID}`);

            // If chat element is found
            if (chatDiv && badge) {
                // Show the notification on the chat item
                chatDiv.classList.add("highlight");

                let count = parseInt(badge.textContent) || 0;
                count++; // Increment unread message count
                badge.textContent = count;
                badge.classList.add("show"); // Show the notification badge

                // Store the unread count in localStorage
                setUnreadCount(chatID, count);

                // Play sound if the tab is not focused
                if (!isFocus && userInteracted) {
                    notificationmsg.play().catch((error) => {
                        console.error("Playback failed:", error);
                    });
                }
            }
        });

        // Reset highlight when user clicks on the chat
        document.querySelectorAll(".chat-list a").forEach(chat => {
            chat.addEventListener("click", () => {
                const badge = chat.querySelector(".notification-badge");
                if (badge) {
                    badge.classList.remove("show");
                    chat.classList.remove("highlight");

                    const chatID = chat.id.split('-')[1];
                    setUnreadCount(chatID, 0); // Reset unread count after opening the chat
                }
            });
        });

        // On page load, restore the unread message count and apply notification badge
        window.addEventListener('load', () => {
            document.querySelectorAll(".chat-list a").forEach(chat => {
                const chatID = chat.id.split('-')[1];
                const unreadCount = getUnreadCount(chatID);
                const badge = chat.querySelector(".notification-badge");
                if (badge) {
                    badge.textContent = unreadCount;
                    if (unreadCount > 0) {
                        badge.classList.add("show");
                    }
                }
            });
        });
    </script>
</body>

</html>
